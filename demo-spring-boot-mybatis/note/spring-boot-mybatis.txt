
启动：

没有 加注解 org.mybatis.spring.annotation.MapperScan 时的流程：

org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration
    - org.mybatis.spring.boot.autoconfigure.MybatisProperties
    -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.AutoConfiguredMapperScannerRegistrar.registerBeanDefinitions
        - builder.addPropertyValue("annotationClass", Mapper.class);
        -> org.mybatis.spring.mapper.MapperScannerConfigurer.postProcessBeanDefinitionRegistry
            -> org.mybatis.spring.mapper.MapperScannerConfigurer.processPropertyPlaceHolders
            -> org.mybatis.spring.mapper.ClassPathMapperScanner.ClassPathMapperScanner
                -> org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.registerDefaultFilters
            -> org.mybatis.spring.mapper.ClassPathMapperScanner.registerFilters *
            -> org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan
                -> org.mybatis.spring.mapper.ClassPathMapperScanner.doScan (覆盖)
                    -> org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan
                        -> org.mybatis.spring.mapper.ClassPathMapperScanner.processBeanDefinitions [*]
                -> org.springframework.context.annotation.AnnotationConfigUtils.registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)

    -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.MybatisAutoConfiguration
    -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration#afterPropertiesSet
        -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.checkConfigFileExists
    -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration#sqlSessionFactory
        -> org.mybatis.spring.SqlSessionFactoryBean
        -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.applyConfiguration
        -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.applySqlSessionFactoryBeanCustomizers
        -> org.mybatis.spring.SqlSessionFactoryBean#getObject [*]
            -> org.mybatis.spring.SqlSessionFactoryBean#afterPropertiesSet
                -> org.mybatis.spring.SqlSessionFactoryBean#buildSqlSessionFactory
                    - org.apache.ibatis.session.Configuration
                    -> org.mybatis.spring.SqlSessionFactoryBean.scanClasses
                    - mapperLocations
                    -> org.apache.ibatis.builder.xml.XMLMapperBuilder#XMLMapperBuilder(java.io.InputStream, org.apache.ibatis.session.Configuration, java.lang.String, java.util.Map<java.lang.String,org.apache.ibatis.parsing.XNode>)
                    -> org.apache.ibatis.builder.xml.XMLMapperBuilder#parse
                        -> org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement
                            -> org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(java.util.List<org.apache.ibatis.parsing.XNode>)
                                -> org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(java.util.List<org.apache.ibatis.parsing.XNode>, java.lang.String)
                                    -> org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode
                                        -> org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(java.lang.String, org.apache.ibatis.mapping.SqlSource, org.apache.ibatis.mapping.StatementType, org.apache.ibatis.mapping.SqlCommandType, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Class<?>, java.lang.String, java.lang.Class<?>, org.apache.ibatis.mapping.ResultSetType, boolean, boolean, boolean, org.apache.ibatis.executor.keygen.KeyGenerator, java.lang.String, java.lang.String, java.lang.String, org.apache.ibatis.scripting.LanguageDriver, java.lang.String)
                                            -> org.apache.ibatis.session.Configuration.addMappedStatement
                        -> org.apache.ibatis.builder.xml.XMLMapperBuilder#bindMapperForNamespace *
                            -> org.apache.ibatis.session.Configuration.addMapper
                                -> org.apache.ibatis.binding.MapperRegistry.addMapper
                                    -> org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.MapperAnnotationBuilder
                                    -> org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse
                        -> org.apache.ibatis.builder.xml.XMLMapperBuilder#parsePendingResultMaps
                        -> org.apache.ibatis.builder.xml.XMLMapperBuilder#parsePendingCacheRefs
                        -> org.apache.ibatis.builder.xml.XMLMapperBuilder#parsePendingStatements
                            -> org.apache.ibatis.builder.xml.XMLMapperBuilder.parsePendingStatements
                                -> org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode
                    -> org.apache.ibatis.session.defaults.DefaultSqlSessionFactory.DefaultSqlSessionFactory
    -> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration#sqlSessionTemplate
        - org.apache.ibatis.session.ExecutorType
        -> org.mybatis.spring.SqlSessionTemplate#SqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory)
            -> org.mybatis.spring.SqlSessionTemplate#SqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory, org.apache.ibatis.session.ExecutorType)
                -> org.mybatis.spring.SqlSessionTemplate#SqlSessionTemplate(org.apache.ibatis.session.SqlSessionFactory, org.apache.ibatis.session.ExecutorType, org.springframework.dao.support.PersistenceExceptionTranslator)

                    this.sqlSessionProxy = (SqlSession) newProxyInstance(SqlSessionFactory.class.getClassLoader(),
                    new Class[] { SqlSession.class }, new SqlSessionInterceptor());

                    -> org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor
                        -> org.mybatis.spring.SqlSessionUtils.getSqlSession(org.apache.ibatis.session.SqlSessionFactory, org.apache.ibatis.session.ExecutorType, org.springframework.dao.support.PersistenceExceptionTranslator)
                        -> org.mybatis.spring.SqlSessionUtils.closeSqlSession

                    -> org.mybatis.spring.support.SqlSessionDaoSupport.setSqlSessionFactory

加了 org.mybatis.spring.annotation.MapperScan 流程：

-> org.mybatis.spring.annotation.MapperScan
    -> org.mybatis.spring.annotation.MapperScannerRegistrar
        -> org.mybatis.spring.annotation.MapperScannerRegistrar.registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)
            -> org.mybatis.spring.annotation.MapperScannerRegistrar.generateBaseBeanName
            -> org.mybatis.spring.annotation.MapperScannerRegistrar.registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.core.annotation.AnnotationAttributes, org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.String)
                - BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);
                -> org.mybatis.spring.mapper.MapperScannerConfigurer.postProcessBeanDefinitionRegistry

-> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.MybatisAutoConfiguration

mapper 接口代理流程

-> org.mybatis.spring.mapper.MapperFactoryBean.getObject
    -> org.mybatis.spring.support.SqlSessionDaoSupport.getSqlSession
    -> org.mybatis.spring.SqlSessionTemplate.getMapper
        -> org.mybatis.spring.SqlSessionTemplate.getConfiguration
            -> org.apache.ibatis.session.SqlSessionFactory.getConfiguration
        -> org.apache.ibatis.session.Configuration.getMapper
            -> org.apache.ibatis.binding.MapperRegistry.getMapper
                -> org.apache.ibatis.binding.MapperProxyFactory.newInstance(org.apache.ibatis.session.SqlSession)
                    -> org.apache.ibatis.binding.MapperProxy
                    -> org.apache.ibatis.binding.MapperProxyFactory.newInstance(org.apache.ibatis.binding.MapperProxy<T>)



查询流程：

-> com.fengwenyi.springboot.mybatis.mapper.UserMapper.queryAll
    -> org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor.invoke
        -> org.mybatis.spring.SqlSessionUtils.getSqlSession(org.apache.ibatis.session.SqlSessionFactory, org.apache.ibatis.session.ExecutorType, org.springframework.dao.support.PersistenceExceptionTranslator)

        -> java.lang.reflect.Method.invoke
            -> org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(java.lang.String, java.lang.Object)
                -> org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(java.lang.String, java.lang.Object, org.apache.ibatis.session.RowBounds)
                    -> org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(java.lang.String, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)
                        -> org.apache.ibatis.session.Configuration.getMappedStatement(java.lang.String)
                            -> org.apache.ibatis.session.Configuration.getMappedStatement(java.lang.String, boolean)
                                -> org.apache.ibatis.session.Configuration.buildAllStatements
                                    -> org.apache.ibatis.session.Configuration.parsePendingResultMaps
                        -> org.apache.ibatis.session.defaults.DefaultSqlSession.
                        -> org.apache.ibatis.executor.Executor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)
                            -> org.apache.ibatis.executor.CachingExecutor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)
                                -> org.apache.ibatis.mapping.MappedStatement.getBoundSql
                                -> org.apache.ibatis.executor.CachingExecutor.createCacheKey
                                -> org.apache.ibatis.executor.CachingExecutor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)
                                    -> org.apache.ibatis.mapping.MappedStatement.getCache
                                    -> org.apache.ibatis.executor.Executor.query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)
                                        -> org.apache.ibatis.executor.BaseExecutor.queryFromDatabase
                                            -> org.apache.ibatis.executor.BaseExecutor.doQuery
                                                -> org.apache.ibatis.mapping.MappedStatement.getConfiguration
                                                -> org.apache.ibatis.session.Configuration.newStatementHandler
                                                -> org.apache.ibatis.executor.SimpleExecutor.prepareStatement
                                                -> org.apache.ibatis.executor.statement.StatementHandler.query
                                                    -> org.apache.ibatis.executor.statement.StatementHandler.
                                                    -> org.apache.ibatis.executor.statement.PreparedStatementHandler.query
                                                        -> java.sql.PreparedStatement.execute
                                                        -> org.apache.ibatis.executor.resultset.ResultSetHandler.handleResultSets


新增流程：
-> org.apache.ibatis.binding.MapperProxy.invoke
    -> org.apache.ibatis.binding.MapperProxy.PlainMethodInvoker.invoke
        -> org.apache.ibatis.binding.MapperMethod.execute
            - command: INSERT
            -> org.mybatis.spring.SqlSessionTemplate.insert(java.lang.String, java.lang.Object)
                -> org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor.invoke
                    -> org.mybatis.spring.SqlSessionUtils.getSqlSession(org.apache.ibatis.session.SqlSessionFactory, org.apache.ibatis.session.ExecutorType, org.springframework.dao.support.PersistenceExceptionTranslator)
                    -> org.apache.ibatis.session.defaults.DefaultSqlSession.insert(java.lang.String, java.lang.Object)
                    -> org.apache.ibatis.session.defaults.DefaultSqlSession.update(java.lang.String, java.lang.Object)


执行的类型

org.apache.ibatis.binding.MapperMethod.execute


MapKey 执行流程：

com.fengwenyi.springboot.mybatis.mapper.UserMapper.queryMapByName
    -> org.apache.ibatis.binding.MapperMethod.execute
        -> org.apache.ibatis.binding.MapperMethod.executeForMap
            -> org.mybatis.spring.SqlSessionTemplate.selectMap(java.lang.String, java.lang.Object, java.lang.String)
                -> org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor.invoke
                    -> org.apache.ibatis.session.defaults.DefaultSqlSession.selectMap(java.lang.String, java.lang.Object, java.lang.String)