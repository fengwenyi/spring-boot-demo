spring:
  jpa:
    show-sql: true
    hibernate:
      #      ddl-auto: none
      ddl-auto: update
    properties:
      hibernate.show_sql: true
      hibernate.format_sql: true
    open-in-view: false

  shardingsphere:
    datasource:
      names: demo-sharding-ds0, demo-sharding-ds1
      demo-sharding-ds0:
        type: org.apache.commons.dbcp2.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/demo-sharding-ds0
        username: root
        password: 123456
      demo-sharding-ds1:
        type: org.apache.commons.dbcp2.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/demo-sharding-ds1
        username: root
        password: 123456
    sharding:
      tables:
        t_order:
          actual-data-nodes: demo-sharding-ds$->{0..1}.t_order$->{0..1}
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: t_order$->{id % 2}
#          key-generator:
#            column: id
#            type: SNOWFLAKE

        t_log:
          actual-data-nodes: demo-sharding-ds0.t_log_$->{2024..2025}
          table-strategy:
#            inline:
#              sharding-column: log_time
#              algorithm-expression: t_log_$->{}
            standard:
              sharding-column: log_time
              precise-algorithm-class-name: com.fengwenyi.demo.springboot.shardingjdbc.algorithm.LogTablePreciseShardingAlgorithm

      binding-tables: t_order, t_log
#      broadcast-tables: t_config

      default-database-strategy:
        inline:
          sharding-column: user_id
          algorithm-expression: demo-sharding-ds$->{user_id % 2}
